my $datx = <<TEXT
C: 3 1 0 2 1 1 1 0 3 2 0 3 2 2 
C: 3 3 0 3 1 0 0 2 0 1 1 2 2 1 
C: 0 0 1 0 3 1 3 3 2 1 2 1 3 2 
C: 1 1 3 3 0 2 2 3 2 3 1 0 2 0 
C: 0 2 0 1 2 3 3 1 1 2 1 0 0 3 
C: 2 0 0 3 3 3 2 2 3 2 1 1 1 0 
C: 3 1 2 0 2 3 0 3 1 0 2 1 2 1 
C: 3 2 3 0 3 0 1 0 1 1 2 2 1 3 
C: 2 3 1 0 2 3 1 1 0 3 0 2 3 0 
C: 1 0 3 2 2 1 2 1 3 0 0 0 3 1 
C: 1 3 2 1 0 0 2 3 3 1 0 2 0 2 
C: 1 0 1 3 1 2 0 0 1 2 3 2 0 3 
C: 0 2 1 2 3 2 0 2 2 3 3 3 1 1 
C: 0 3 3 1 0 1 3 0 0 0 3 3 1 2 
TEXT
;

my $dat14 = <<TEXT
C: 2 1 0 2 1 1 1 0 3 2 0 3 2 3 
C: 3 3 0 3 1 0 3 2 0 1 1 2 2 1 
C: 2 0 1 0 0 1 3 3 2 1 2 1 3 2 
C: 1 1 3 3 0 2 2 3 2 3 1 0 2 0 
C: 0 2 0 1 2 2 3 1 1 3 1 0 0 3 
C: 2 2 0 3 3 3 2 2 3 0 1 1 1 0 
C: 3 1 2 0 2 3 0 3 1 1 2 3 2 0 
C: 3 2 3 0 3 0 1 0 1 2 2 0 1 3 
C: 2 3 1 0 2 3 1 1 0 3 0 2 3 1 
C: 1 0 3 2 2 1 2 1 3 0 0 0 3 2 
C: 1 3 2 1 0 0 1 3 3 2 0 1 0 2 
C: 1 0 1 3 1 2 0 0 1 2 3 2 0 3 
C: 0 1 2 2 3 0 0 2 2 3 3 3 1 1 
C: 0 2 3 1 0 1 3 0 0 0 3 2 1 2 
TEXT
;

my $dat17 = <<TEXT
C: 0 1 1 2 1 2 0 2 3 1 0 0 2 0 3 0 3 
C: 2 2 2 0 2 2 1 0 0 1 3 0 1 3 2 0 2 
C: 0 1 3 1 3 1 3 0 1 0 1 1 0 3 2 1 1 
C: 2 0 0 0 2 0 0 2 3 2 2 1 0 1 1 1 0 
C: 0 1 2 1 3 1 1 2 3 0 1 1 3 2 1 1 1 
C: 3 1 0 3 2 0 3 1 2 0 2 0 1 2 0 1 1 
C: 3 0 1 2 1 1 2 0 1 3 1 3 3 2 2 3 0 
C: 0 0 1 2 0 3 0 1 2 2 2 2 1 2 0 3 1 
C: 3 0 3 1 2 3 2 1 0 2 0 3 3 2 0 2 3 
C: 3 2 3 1 0 1 2 3 2 1 2 2 2 0 0 2 2 
C: 2 2 3 2 0 2 2 3 3 3 1 1 0 3 3 1 0 
C: 1 3 0 0 0 3 3 1 2 2 3 3 0 0 3 2 0 
C: 0 3 3 1 1 1 1 3 1 2 2 3 0 1 1 1 3 
C: 0 3 0 3 3 2 3 0 1 0 0 2 0 3 1 3 3 
C: 1 1 0 3 3 2 3 2 0 0 1 3 0 2 0 1 3 
C: 1 3 3 3 2 3 3 1 0 1 3 2 0 1 1 1 1 
C: 0 0 0 1 0 0 2 2 0 0 2 1 0 1 0 1 2
TEXT
;

my $dat18 = <<TEXT
C: 3 3 3 0 1 2 0 1 0 1 2 2 3 2 3 1 3 0 
C: 1 0 2 0 1 3 1 0 0 0 2 3 2 3 3 3 1 2 
C: 2 1 3 1 3 0 1 0 1 1 0 3 2 1 1 1 0 0 
C: 2 2 0 0 2 3 2 2 1 0 1 1 1 0 0 1 2 1 
C: 3 1 1 2 3 0 1 1 3 2 1 1 1 3 1 0 3 2 
C: 0 3 1 2 0 2 0 1 2 0 1 1 3 0 1 2 1 1 
C: 2 0 1 3 1 3 3 2 2 3 0 0 0 1 2 0 3 0 
C: 1 2 2 2 2 1 2 0 3 1 3 0 3 1 2 3 2 1 
C: 0 2 0 3 3 2 0 2 3 3 2 3 1 0 1 2 3 2 
C: 1 2 2 2 0 0 2 2 2 2 3 2 0 2 2 3 3 3 
C: 1 1 0 3 3 1 0 1 3 0 0 0 3 3 1 2 2 3 
C: 3 0 0 3 2 0 0 3 3 1 1 1 1 3 1 2 2 3 
C: 0 1 1 1 3 0 3 0 3 3 2 3 0 1 0 0 2 0 
C: 3 1 3 3 1 1 0 3 3 2 3 2 0 0 1 3 0 2 
C: 0 1 3 1 3 3 3 2 3 3 1 0 1 3 2 0 1 1 
C: 1 1 0 0 0 1 0 0 2 2 0 0 2 1 0 1 0 1 
C: 2 3 1 1 1 3 3 3 1 2 1 0 1 0 2 2 0 0 
C: 2 1 0 2 3 1 1 0 2 2 1 3 2 2 3 1 1 3 
TEXT
;

my ($width, $height, $col) = parse($dat14);
print "$width x $height\n";

my $fails = 0;
for (my $y1 = 0; $y1 < $height; $y1++) {
  for (my $x1 = 0; $x1 < $width; $x1++) {
    for (my $y2 = 0; $y2 < $height; $y2++) {
      next if $y1 == $y2;
      for (my $x2 = 0; $x2 < $width; $x2++) {
	next if $x1 == $x2;
	my $c1 = cat($col, $x1, $y1);
	my $c2 = cat($col, $x1, $y2);
	my $c3 = cat($col, $x2, $y1);
	my $c4 = cat($col, $x2, $y2);
	if (($c1 == $c2) && ($c1 == $c3) && ($c1 == $c4)) {
	  print "mono rect: [$x1,$y1] - [$x2,$y2]\n";
	  $fails += 1;
	  #exit(1);
	}
      }
    }
  }
}

if ($fails) {
  print "$fails FAILS!\n";
  exit(1);
} else {
  print "all good\n";
  exit(0);
}

sub cat {
  my ($c, $x, $y) = @_;
  return $c->[$y]->[$x];
}

sub parse {
  my ($str) = @_;

  my $ret = [];

  my @lines = ($str =~ m/C: (.*?)\n/gm);

  my $height = scalar(@lines);
  my $width = 0;

  foreach my $line (@lines) {
    my @temp = split(/ /, $line);
    $width = scalar(@temp);
    push (@$ret, [@temp]);
  }

  return ($width, $height, $ret);
}

